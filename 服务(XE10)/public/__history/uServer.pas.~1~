unit uServer;

interface

uses
  Iocp, iocp.Utils.Hash, iocp.Http, iocp.Http.Websocket, Windows, SysUtils,
  Classes, SyncObjs, uPubFunc, superobject, iocp.Sockets;

type
  TOnProcRequest = function(Request: TIocpHttpRequest; Response: TIocpHttpResponse): Boolean of object;

  TOnRecvBuffer = procedure(const pvClientContext: TIocpContext; buf: Pointer; len: cardinal; errCode: Integer) of object;

  TOnAccept = procedure(pvSocket: THandle; const pvAddr: string; pvPort: Word; var vAllowAccept: Boolean) of object;

  TOnDisAccept = procedure(const Context: TIocpContext) of object;

  TPtService = class(TObject)
  private
    FPtWebService: TIocpHttpServer;
//    FPtWebService: TIocpWebSocketServer;
    FProcList: TStringHash;
  protected
    function IsDestroying: Boolean;
    procedure DoRequest(Sender: TIocpHttpServer; Request: TIocpHttpRequest; Response: TIocpHttpResponse);
    procedure DoWebSocketRequest(Sender: TIocpWebSocketServer; Request: TIocpWebSocketRequest; Response: TIocpWebSocketResponse);
    procedure DoFreeProcItem(Item: PHashItem);
  public
    FStickRef: Integer;
    constructor Create(htpPort: Word); reintroduce;
    destructor Destroy; override;
    procedure RegHttpProc(const URI: string; const Proc: TOnProcRequest);
    procedure RegSoctetProc(const OnRecvBuffer: TOnRecvBuffer; const OnAccept: TOnAccept; const OnDisAccept: TOnDisAccept);
    procedure Start;
    procedure Stop;
  end;

var
  SMARTURL: string;

implementation

uses
  uPubVar;

type
  PMethod = ^TMethod;

var
  SoftPath: string;

{ TPtService }

constructor TPtService.Create(htpPort: Word);
begin
  FPtWebService := TIocpHttpServer.Create(nil);
//  FPtWebService := TIocpWebSocketServer.Create(nil);
  FPtWebService.ListenPort := htpPort;
  FPtWebService.UploadMaxDataSize := 1024 * 1024;
  FPtWebService.MaxTaskWorker := 64;
  FPtWebService.MaxContextPoolSize := 1;
  FPtWebService.OnHttpRequest := DoRequest;
//  FPtWebService.OnWebSocketRequest := DoWebSocketRequest;
  FProcList := TStringHash.Create();
  FProcList.OnFreeItem := DoFreeProcItem;

//  DoRegProc();
end;

destructor TPtService.Destroy;
begin
  try
    Stop;
    FreeAndNil(FPtWebService);
    FreeAndNil(FProcList);
  except

  end;
  inherited Destroy;
end;

procedure TPtService.DoFreeProcItem(Item: PHashItem);
begin
  if Item <> nil then
    Dispose(Pointer(Item.Value));
end;

procedure TPtService.DoRequest(Sender: TIocpHttpServer; Request: TIocpHttpRequest; Response: TIocpHttpResponse);
var
  V: Number;
  tmp, sign, method: string;
  vJson: ISuperObject;
begin

  if Request.URI <> SMARTURL then
  begin
    Response.ErrorRequest(404);
    Exit;
  end;
  method := getParam(Request,'method');
    // 接口验证( 若未定义此方法则不验证接口 )
  V := FProcList.ValueOf(LowerCase(string('validation')));
  if V <> -1 then
  begin
    if not TOnProcRequest(PMethod(Pointer(V))^)(Request, Response) then
      Exit;
  end;

  V := FProcList.ValueOf(LowerCase(string(method)));
  if V <> -1 then
  begin
    TOnProcRequest(PMethod(Pointer(V))^)(Request, Response);
  end
  else
    Response.ErrorRequest(404);
end;

procedure TPtService.DoWebSocketRequest(Sender: TIocpWebSocketServer; Request: TIocpWebSocketRequest; Response: TIocpWebSocketResponse);
var
  S: TMemoryStream;
  Data: string;
begin
  //OutputDebugString(PChar(Request.DataString()));
  S := TMemoryStream.Create;
  try
    Data := Request.DataString(hct_UTF8);
    S.Write(Data[1], Length(Data) {$IFDEF UNICODE}  shl 1{$ENDIF});
    S.Position := 0;
    Response.Send(S, wso_Text);
  finally
    S.Free;
  end;
  Response.Send(Request.DataString());
end;

function TPtService.IsDestroying: Boolean;
begin
  Result := (not Assigned(Self));
end;

procedure TPtService.RegHttpProc(const URI: string; const Proc: TOnProcRequest);
var
  P: PMethod;
begin
  if Length(URI) = 0 then
    Exit;
  if Assigned(Proc) then
  begin
    New(P);
    P^ := TMethod(Proc);
    FProcList.Add(LowerCase(URI), Integer(P));
  end;
end;

procedure TPtService.RegSoctetProc(const OnRecvBuffer: TOnRecvBuffer; const OnAccept: TOnAccept; const OnDisAccept: TOnDisAccept);
begin
end;

procedure TPtService.Start;
begin
  FPtWebService.Open;
end;

procedure TPtService.Stop;
begin
  FPtWebService.Close;
end;

initialization
  SoftPath := ExtractFilePath(ParamStr(0));

finalization

end.

