unit uConnBSKJ;

interface

const
  ReadCard_Dll_BSJK_Name = 'ConnBSJK.dll';

  //开启服务
  function BSJK_OpenPort(sIn: WideString): Boolean; stdcall
    ; external ReadCard_Dll_BSJK_Name;
    
  //关闭服务
  function BSJK_ClosePort: Boolean; stdcall
    ; external ReadCard_Dll_BSJK_Name;
    
  //读卡信息
  function BSJK_ReadCard(var sOut: WideString): integer; stdcall
    ; stdcall ; external ReadCard_Dll_BSJK_Name;
    
  //流水上传
  function BSJK_Consume(sIn: WideString; var sOut: WideString): Integer; stdcall
    ; external ReadCard_Dll_BSJK_Name;

type
  TBSJKReader = class(TObject)
  private
    FCom         : Word;
    FBaudRate    : Cardinal;
    FHostAddress : string;
    FHostProtocol: string;
    FModuleName  : string;
    FServiceName : string;
    FHostPort    : Cardinal;
    Fusername    : string;
    Fpassword    : string;
    FClasscode   : string;
    FBalancecode : string;
    FPccode      : string;
  protected
    function OpenPort(sIn: WideString):Boolean;
    procedure ClosePort;
  public
    constructor Create(AComPort: Word);
    destructor Destroy; override;

    property Com          : Word     read FCom           write FCom;
    property BaudRate     : Cardinal read FBaudRate      write FBaudRate;
    property HostAddress  : string   read FHostAddress   write FHostAddress;
    property HostProtocol : string   read FHostProtocol  write FHostProtocol;
    property ModuleName   : string   read FModuleName    write FModuleName;
    property ServiceName  : string   read FServiceName   write FServiceName;
    property HostPort     : Cardinal read FHostPort      write FHostPort;
    property username     : string   read Fusername      write Fusername;
    property password     : string   read Fpassword      write Fpassword;
    property Classcode    : string   read FClasscode     write FClasscode;
    property Balancecode  : string   read FBalancecode   write FBalancecode;
    property Pccode       : string   read FPccode        write FPccode;

    function ReadCard(var card, name: string; var Money: currency): Integer;
    procedure Consume(card, flow, dt: string; pay: Cardinal;
      var balance: Cardinal; var iReturn: Integer);
  end;

implementation

{ TBSJKReader }

procedure TBSJKReader.ClosePort;
begin
  BSJK_ClosePort;
end;

procedure TBSJKReader.Consume(card, flow, dt: string; pay: Cardinal;
  var balance: Cardinal; var iReturn: Integer);


constructor TBSJKReader.Create(AComPort: Word);
var
  json: TQJson;
  sIn: WideString;
  sPath: string;
  aIni: TIniFile;
begin
  sPath:= ExtractFilePath(ParamStr(0))+ INI_POS_BSJK;
  if FileExists(sPath) then
  begin
    aIni:= TIniFile.Create(sPath);;
    json:= TQJson.Create;
    try
      Com:= AComPort- 1;
      //读取INI
      BaudRate:= aIni.ReadInteger('BSJK', 'BaudRate', 9600);
      HostAddress:= aIni.ReadString('BSJK', 'HostAddress', '');
      HostProtocol:= aIni.ReadString('BSJK', 'HostProtocol', '');
      ModuleName:= aIni.ReadString('BSJK', 'ModuleName', '');
      ServiceName:= aIni.ReadString('BSJK', 'ServiceName', '');
      HostPort:= aIni.ReadInteger('BSJK', 'HostPort', 8080);
      username:= aIni.ReadString('BSJK', 'username', '');
      password:= aIni.ReadString('BSJK', 'password', '');
      Classcode:= aIni.ReadString('BSJK', 'Classcode', '');
      Balancecode:= aIni.ReadString('BSJK', 'Balancecode', '');
      Pccode:= aIni.ReadString('BSJK', 'Pccode', '');
      //
      json.AddVariant('Com', Com);
      json.AddVariant('BaudRate', BaudRate);
      json.AddVariant('HostAddress', HostAddress);
      json.AddVariant('HostProtocol', HostProtocol);
      json.AddVariant('ModuleName', ModuleName);
      json.AddVariant('ServiceName', ServiceName);
      json.AddVariant('HostPort', HostPort);
      json.AddVariant('username', username);
      json.AddVariant('password', password);
      json.AddVariant('Classcode', Classcode);
      json.AddVariant('Balancecode', Balancecode);
      json.AddVariant('Pccode', Pccode);
      sIn:= json.AsString;
      OpenPort(sIn);
    finally
      FreeAndNil(aIni);
      FreeAndNil(json);
    end;
  end;
end;

destructor TBSJKReader.Destroy;
begin

  inherited;
end;

function TBSJKReader.OpenPort(sIn: WideString): Boolean;
begin

end;

function TBSJKReader.ReadCard(var card, name: string;
  var Money: currency): Integer;
begin

end;

end.
